@page "/records"
@using MDStore.Components
@inject RecordService RecordService
@inject NavigationManager NavigationManager
@inject RecordsStoreState State
@inherits FragmentNavigationBase
@implements IDisposable

<PageTitle>MD Records</PageTitle>

<h1 id="mainContent">Top @category Redors</h1>


@if (records == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <ul class="recordsList list-group">
        @foreach (var record in records)
        {
            <li class="list-group-item">
                <a href="record/@record.Id">
                    <DecorativeImage class="albumImage" src="@record.AlbumImagePath" />
                    <div class="albumInfo">
                        <div aria-label="Album name">
                            @record.Album
                        </div>
                        <div aria-label="Artist name">
                            @record.Artist
                        </div>
                        <div aria-label="Release date">
                            @record.ReleaseDate.ToShortDateString()
                        </div>
                    </div>
                </a>
            </li>
        }
    </ul>
}

@code {
    private IEnumerable<AvailableRecord>? records;
    private string category = "";
    protected override async Task OnInitializedAsync()
    {
        NavigationManager.LocationChanged += async (s, e) => await NavigationManager_LocationChanged(s, e);

        await RefreshRecords();
    }

    private async Task NavigationManager_LocationChanged(object sender, LocationChangedEventArgs e)
    {
        string? category = NavigationManager.QueryString("category");
        await RefreshRecords();
    }

    private async Task RefreshRecords()
    {
        var allRecords = await RecordService.GetRecords();
        if (allRecords != null && allRecords.Any())
        {
            records = FilterRecords(allRecords);
            StateHasChanged();
        }
    }

    private IEnumerable<AvailableRecord> FilterRecords(IEnumerable<AvailableRecord> allRecords)
    {
        category = NavigationManager.QueryString("category");

        if (!string.IsNullOrEmpty(category))
        {
            return allRecords.Where(record =>
            (!string.IsNullOrEmpty(record.Category)) &&
            record.Category.Equals(category, StringComparison.InvariantCultureIgnoreCase));
        }
        else
        {
            return allRecords;
        }
    }

    void IDisposable.Dispose()
    {
        NavigationManager.LocationChanged -= async (s, e) => await NavigationManager_LocationChanged(s, e);
    }
}
